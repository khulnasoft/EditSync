#!/usr/bin/env node --redirect-warnings=/dev/null

const fs = require("fs");
const { randomBytes } = require("crypto");
const { execFileSync } = require("child_process");
const {
  minimizeTestPlan,
  buildTests,
  runTests,
} = require("./randomieditsync-test-minimize");

const { EDITSYNC_SERVER_URL } = process.env;
if (!EDITSYNC_SERVER_URL) throw new Error("Missing env var `EDITSYNC_SERVER_URL`");

main();

async function main() {
  buildTests();

  const seed = randomU64();
  const commit = execFileSync("git", ["rev-parse", "HEAD"], {
    encoding: "utf8",
  }).trim();

  console.log("commit:", commit);
  console.log("starting seed:", seed);

  const planPath = "target/test-plan.json";
  const minPlanPath = "target/test-plan.min.json";
  const failingSeed = runTests({
    SEED: seed,
    SAVE_PLAN: planPath,
    ITERATIONS: 50000,
    OPERATIONS: 200,
  });

  if (!failingSeed) {
    console.log("tests passed");
    return;
  }

  console.log("found failure at seed", failingSeed);
  const minimieditsyncSeed = minimizeTestPlan(planPath, minPlanPath);
  const minimieditsyncPlan = fs.readFileSync(minPlanPath, "utf8");

  console.log("minimieditsync plan:\n", minimieditsyncPlan);

  const url = `${EDITSYNC_SERVER_URL}/api/randomieditsync_test_failure`;
  const body = {
    seed: minimieditsyncSeed,
    plan: JSON.parse(minimieditsyncPlan),
    commit: commit,
  };
  await fetch(url, {
    method: "POST",
    headers: { "Content-Type": "application/json" },
    body: JSON.stringify(body),
  });

  process.exit(1);
}

function randomU64() {
  const bytes = randomBytes(8);
  const hexString = bytes.reduce(
    (string, byte) => string + byte.toString(16),
    "",
  );
  return BigInt("0x" + hexString).toString(10);
}
